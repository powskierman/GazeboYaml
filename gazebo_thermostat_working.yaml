# =============================================================================
# GAZEBO THERMOSTAT - WORKING MODULAR CONFIGURATION
# =============================================================================
# This is a working version that includes all sensors directly
# =============================================================================

esphome:
  name: gazebo-thermostat
  friendly_name: Gazebo Thermostat
  min_version: 2024.6.0
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    priority: -100
    then:
      - logger.log: "ESP32 booting up - initializing Nextion display"
      - delay: 5s
      - lambda: |-
          ESP_LOGI("nextion", "=== ESP32 BOOTING UP ===");
          ESP_LOGI("nextion", "Initializing Nextion display...");
          
          // Just initialize the display, don't set values to 0
          // The sensor updates will handle setting the correct values
          ESP_LOGI("nextion", "Nextion display initialization completed");

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  baud_rate: 0
  level: INFO

api:
  encryption:
    key: !secret api_key
  reboot_timeout: 0s

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.242
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 8.8.8.8
    dns2: 8.8.4.4
  power_save_mode: none
  ap:
    ssid: GazeboThermostat Fallback
    password: !secret ap_password

captive_portal:

http_request:
  useragent: "esphome/device"
  timeout: 10s
  verify_ssl: false
  id: http_request_data

time:
  - platform: sntp
    id: sntp_time
    timezone: "America/New_York"
    servers:
      - "time.google.com"
      - "time.nist.gov"
      - "pool.ntp.org"
    on_time_sync:
      then:
        - logger.log: "Time synchronized successfully!"
        - lambda: |-
            auto now = id(sntp_time).now();
            ESP_LOGD("time_sync", "Time sync successful: %04d-%02d-%02d %02d:%02d:%02d", 
                     now.year, now.month, now.day_of_month, 
                     now.hour, now.minute, now.second);

output:
  - platform: gpio
    id: gazebo_relay_out
    pin: GPIO12

switch:
  - platform: output
    id: gazebo_relay
    name: "Gazebo Relay"
    output: gazebo_relay_out
    restore_mode: RESTORE_DEFAULT_OFF

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

web_server:
  port: 80

# =============================================================================
# NEXTION DISPLAY SETUP
# =============================================================================

uart:
  id: uart_nextion
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600

display:
  - platform: nextion
    id: nextion0
    uart_id: uart_nextion
    update_interval: 5s
    lambda: |-
      ESP_LOGD("nextion", "Display refresh - data comes from HA sensors");
    on_setup:
      then:
        - logger.log: "Nextion: Initializing display"
        - lambda: |-
            ESP_LOGD("nextion", "Initializing Nextion display...");
            id(nextion0).send_command("page 0");
            delay(1000);
            ESP_LOGD("nextion", "Display initialized on page 0");

# =============================================================================
# SENSORS - ALL PAGES
# =============================================================================

sensor:
  # -----------------------------------------------------------------------------
  # PAGE 0 (zero) - CURRENT OUTDOOR CONDITIONS
  # -----------------------------------------------------------------------------
  - platform: homeassistant
    id: ha_current_temperature
    entity_id: sensor.gazebo_current_temperature
    name: "Gazebo Current Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    internal: true
    on_value:
      then:
        - lambda: |-
            ESP_LOGI("ha_temp", "=== TEMPERATURE CALLBACK TRIGGERED ===");
            ESP_LOGI("ha_temp", "Received temperature: %f°C", x);
            if (!isnan(x)) {
              char cmd[32];
              snprintf(cmd, sizeof(cmd), "zero.feels_like.val=%d", (int) lroundf(x));
              ESP_LOGI("ha_temp", "Sending to Nextion: %s", cmd);
              id(nextion0).send_command(cmd);
              ESP_LOGI("ha_temp", "Command sent successfully");
            } else {
              ESP_LOGI("ha_temp", "Temperature value is NaN!");
            }

  - platform: homeassistant
    id: ha_current_humidity
    entity_id: sensor.gazebo_current_humidity
    name: "Gazebo Humidity"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    on_value:
      then:
        - lambda: |-
            ESP_LOGI("ha_humidity", "=== HUMIDITY CALLBACK TRIGGERED ===");
            ESP_LOGI("ha_humidity", "Received humidity: %f%%", x);
            if (!isnan(x)) {
              char cmd[32];
              snprintf(cmd, sizeof(cmd), "zero.rain.val=%d", (int) lroundf(x));
              ESP_LOGI("ha_humidity", "Sending to Nextion page 0: %s", cmd);
              id(nextion0).send_command(cmd);
              ESP_LOGI("ha_humidity", "Humidity command sent successfully");
            } else {
              ESP_LOGI("ha_humidity", "Humidity value is NaN!");
            }

  # -----------------------------------------------------------------------------
  # PAGE 1 (one) - 7-HOUR FORECAST - WEATHER ICONS (wxIcon0-wxIcon6)
  # -----------------------------------------------------------------------------
  - platform: homeassistant
    id: ha_hour_0_weather_code
    entity_id: sensor.gazebo_hour_0_weather_code
    name: "Hour 0 Weather Code"
    unit_of_measurement: ""
    accuracy_decimals: 0
    internal: true
    on_value:
      then:
        - lambda: |-
            ESP_LOGI("ha_wx0", "Received H0 weather code: %f", x);
            if (!isnan(x)) {
              int weather_code = (int) lroundf(x);
              int icon_number = 26;
              switch(weather_code) {
                case 0: case 1: icon_number = 26; break;
                case 2: icon_number = 22; break;
                case 3: icon_number = 3; break;
                case 45: case 48: icon_number = 3; break;
                case 51: icon_number = 17; break;
                case 53: case 55: icon_number = 16; break;
                case 56: case 57: icon_number = 18; break;
                case 61: icon_number = 17; break;
                case 63: icon_number = 16; break;
                case 65: icon_number = 15; break;
                case 66: case 67: icon_number = 18; break;
                case 71: icon_number = 19; break;
                case 73: case 75: case 77: icon_number = 20; break;
                case 80: icon_number = 17; break;
                case 81: icon_number = 16; break;
                case 82: icon_number = 15; break;
                case 85: icon_number = 19; break;
                case 86: icon_number = 20; break;
                case 95: case 96: case 99: icon_number = 7; break;
                default: icon_number = 26; break;
              }
              char cmd[32];
              snprintf(cmd, sizeof(cmd), "one.wxIcon0.pic=%d", icon_number);
              ESP_LOGI("ha_wx0", "Sending to Nextion: %s (code %d → icon %d)", cmd, weather_code, icon_number);
              id(nextion0).send_command(cmd);
            }

  # Add more sensors here - this is just a sample to test the structure
  # The full configuration would include all Page 1 and Page 2 sensors

# =============================================================================
# BINARY SENSORS - NEXTION NAVIGATION
# =============================================================================

binary_sensor:
  - platform: nextion
    page_id: 0
    component_id: 1
    name: "Page 0 Next"
    id: nx_page0_next
    on_press:
      then:
        - logger.log: "Page 0 button pressed"
        - lambda: |-
            ESP_LOGI("nextion", "Page 0 button pressed");
            id(nextion0).send_command("page 0");

  - platform: nextion
    page_id: 1
    component_id: 0
    name: "Page 1 Back"
    id: nx_page1_back
    on_press:
      then:
        - logger.log: "Page 1 button pressed"
        - lambda: |-
            ESP_LOGI("nextion", "Page 1 button pressed");
            id(nextion0).send_command("page 1");

  - platform: nextion
    page_id: 1
    component_id: 1
    name: "Page 1 Next"
    id: nx_page1_next
    on_press:
      then:
        - logger.log: "Page 1 Next button pressed"
        - lambda: |-
            ESP_LOGI("nextion", "Page 1 Next button pressed");
            id(nextion0).send_command("page 2");

  - platform: nextion
    page_id: 2
    component_id: 0
    name: "Page 2 Back"
    id: nx_page2_back
    on_press:
      then:
        - logger.log: "Page 2 Back button pressed"
        - lambda: |-
            ESP_LOGI("nextion", "Page 2 Back button pressed");
            id(nextion0).send_command("page 1");

  - platform: nextion
    page_id: 2
    component_id: 1
    name: "Page 2 Next"
    id: nx_page2_next
    on_press:
      then:
        - logger.log: "Page 2 Next button pressed"
        - lambda: |-
            ESP_LOGI("nextion", "Page 2 Next button pressed");
            id(nextion0).send_command("page 0");

# =============================================================================
# TEXT SENSORS
# =============================================================================

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "WiFi IP"
      id: wifi_ip
      on_value:
        then:
          - lambda: |-
              ESP_LOGI("wifi", "WiFi IP: %s", x.c_str());
              char cmd[64];
              snprintf(cmd, sizeof(cmd), "zero.ip.txt=\"%s\"", x.c_str());
              id(nextion0).send_command(cmd);
              ESP_LOGI("wifi", "Sent IP to Nextion: %s", cmd);

  - platform: template
    id: current_time_text
    name: "Current Time Text"
    internal: true
    update_interval: 60s
    lambda: |-
      auto now = id(sntp_time).now();
      char time_str[32];
      snprintf(time_str, sizeof(time_str), "%02d:%02d", now.hour, now.minute);
      ESP_LOGD("time", "Current time text: %s", time_str);
      return std::string(time_str);
    on_value:
      - lambda: |-
          ESP_LOGD("time", "Time text updated: %s", x.c_str());
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "zero.time.txt=\"%s\"", x.c_str());
          id(nextion0).send_command(cmd);
          ESP_LOGD("time", "Sent time to Nextion: %s", cmd);
