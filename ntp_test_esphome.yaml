esphome:
  name: ntp-test
  friendly_name: "NTP Test"
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.243
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 8.8.8.8
    dns2: 8.8.4.4
  ap:
    ssid: "NTP-Test Fallback"
    password: !secret ap_password

captive_portal:

# Simple SNTP time configuration
time:
  - platform: sntp
    id: sntp_time
    timezone: "America/New_York"
    servers:
      - "time.google.com"
      - "time.nist.gov"
      - "pool.ntp.org"
    on_time_sync:
      then:
        - logger.log: "Time synchronized successfully!"
        - lambda: |-
            auto now = id(sntp_time).now();
            ESP_LOGI("time", "Time: %04d-%02d-%02d %02d:%02d:%02d", 
                     now.year, now.month, now.day_of_month,
                     now.hour, now.minute, now.second);

# Display current time every 10 seconds
interval:
  - interval: 10s
    then:
      - lambda: |-
          auto time = id(sntp_time).now();
          if (time.is_valid()) {
            ESP_LOGI("main", "Current time: %04d-%02d-%02d %02d:%02d:%02d", 
                     time.year, time.month, time.day_of_month,
                     time.hour, time.minute, time.second);
          } else {
            ESP_LOGW("main", "Time not synchronized yet");
          }

# Text sensor to show time status
text_sensor:
  - platform: template
    name: "ESP32 Current Time"
    id: esp32_time_display
    update_interval: 5s
    lambda: |-
      auto now = id(sntp_time).now();
      if (now.is_valid()) {
        char time_str[64];
        snprintf(time_str, sizeof(time_str), "%04d-%02d-%02d %02d:%02d:%02d", 
                 now.year, now.month, now.day_of_month, 
                 now.hour, now.minute, now.second);
        return std::string(time_str);
      } else {
        return std::string("Time not synchronized");
      }

  - platform: wifi_info
    ip_address:
      name: "NTP Test IP"

# Button to force time sync
button:
  - platform: template
    name: "Force Time Sync"
    on_press:
      then:
        - logger.log: "Forcing time synchronization..."
        - lambda: 'id(sntp_time).call_setup();'
        - delay: 5s
        - lambda: |-
            auto now = id(sntp_time).now();
            if (now.is_valid()) {
              ESP_LOGI("time_sync", "Sync successful: %04d-%02d-%02d %02d:%02d:%02d",
                       now.year, now.month, now.day_of_month,
                       now.hour, now.minute, now.second);
            } else {
              ESP_LOGW("time_sync", "Sync failed - time still invalid");
            }

# Web server for debugging
web_server:
  port: 80

# WiFi signal monitoring
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s