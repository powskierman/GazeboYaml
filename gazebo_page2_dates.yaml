# =============================================================================
# GAZEBO THERMOSTAT - PAGE 2 DATE TEXT SENSORS
# =============================================================================
# This file contains date text sensors for Page 2 of the Nextion display
# =============================================================================

text_sensor:
  # PAGE 2 - COLUMN 1: DATE (dt10-dt16) - Text template sensors
- platform: template
  id: ha_day_0_date
  name: "Forecast Day 0 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    // Day 0 = Tomorrow (today + 1 day)
    time.increment_day();
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 0 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 0 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          time.increment_day();
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt10.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

- platform: template
  id: ha_day_1_date
  name: "Forecast Day 1 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    for(int i = 0; i < 2; i++) { time.increment_day(); }
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 1 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 1 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          for(int i = 0; i < 2; i++) { time.increment_day(); }
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt11.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

- platform: template
  id: ha_day_2_date
  name: "Forecast Day 2 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    for(int i = 0; i < 3; i++) { time.increment_day(); }
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 2 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 2 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          for(int i = 0; i < 3; i++) { time.increment_day(); }
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt12.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

- platform: template
  id: ha_day_3_date
  name: "Forecast Day 3 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    for(int i = 0; i < 4; i++) { time.increment_day(); }
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 3 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 3 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          for(int i = 0; i < 4; i++) { time.increment_day(); }
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt13.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

- platform: template
  id: ha_day_4_date
  name: "Forecast Day 4 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    for(int i = 0; i < 5; i++) { time.increment_day(); }
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 4 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 4 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          for(int i = 0; i < 5; i++) { time.increment_day(); }
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt14.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

- platform: template
  id: ha_day_5_date
  name: "Forecast Day 5 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    for(int i = 0; i < 6; i++) { time.increment_day(); }
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 5 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 5 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          for(int i = 0; i < 6; i++) { time.increment_day(); }
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt15.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

- platform: template
  id: ha_day_6_date
  name: "Forecast Day 6 Date"
  internal: false
  update_interval: 60s
  lambda: |-
    auto time = id(sntp_time).now();
    if (!time.is_valid()) {
      return std::string("--/--");
    }
    for(int i = 0; i < 7; i++) { time.increment_day(); }
    time.recalc_timestamp_utc(false);
    char date_str[6];
    snprintf(date_str, sizeof(date_str), "%02d/%02d", time.day_of_month, time.month);
    ESP_LOGI("date", "Day 6 date: %s", date_str);
    return std::string(date_str);
  on_value:
    - lambda: |-
        ESP_LOGI("date", "Day 6 date updated: %s", x.c_str());
        auto time = id(sntp_time).now();
        if (time.is_valid()) {
          for(int i = 0; i < 7; i++) { time.increment_day(); }
          time.recalc_timestamp_utc(false);
          char cmd[64];
          snprintf(cmd, sizeof(cmd), "two.dt16.val=%d", time.day_of_month);
          id(nextion0).send_command(cmd);
          ESP_LOGI("date", "Sent date to Nextion: %s", cmd);
        }

